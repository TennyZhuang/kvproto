// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: enginepb.proto

#include "enginepb.grpc.pb.h"
#include "enginepb.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace enginepb
{

static const char * Engine_method_names[] = {
    "/enginepb.Engine/ApplyCommand",
    "/enginepb.Engine/ApplySnapshot",
};

std::unique_ptr<Engine::Stub> Engine::NewStub(const std::shared_ptr<::grpc::ChannelInterface> & channel,
                                              const ::grpc::StubOptions &                       options)
{
    (void)options;
    std::unique_ptr<Engine::Stub> stub(new Engine::Stub(channel));
    return stub;
}

Engine::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface> & channel)
    : channel_(channel),
      rpcmethod_ApplyCommand_(Engine_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel),
      rpcmethod_ApplySnapshot_(Engine_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
{
}

::grpc::ClientReaderWriter<::enginepb::CommandRequet, ::enginepb::CommandResponse> *
Engine::Stub::ApplyCommandRaw(::grpc::ClientContext * context)
{
    return ::grpc::internal::ClientReaderWriterFactory<::enginepb::CommandRequet, ::enginepb::CommandResponse>::Create(
        channel_.get(), rpcmethod_ApplyCommand_, context);
}

::grpc::ClientAsyncReaderWriter<::enginepb::CommandRequet, ::enginepb::CommandResponse> *
Engine::Stub::AsyncApplyCommandRaw(::grpc::ClientContext * context, ::grpc::CompletionQueue * cq, void * tag)
{
    return ::grpc::internal::ClientAsyncReaderWriterFactory<::enginepb::CommandRequet, ::enginepb::CommandResponse>::Create(
        channel_.get(), cq, rpcmethod_ApplyCommand_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter<::enginepb::CommandRequet, ::enginepb::CommandResponse> *
Engine::Stub::PrepareAsyncApplyCommandRaw(::grpc::ClientContext * context, ::grpc::CompletionQueue * cq)
{
    return ::grpc::internal::ClientAsyncReaderWriterFactory<::enginepb::CommandRequet, ::enginepb::CommandResponse>::Create(
        channel_.get(), cq, rpcmethod_ApplyCommand_, context, false, nullptr);
}

::grpc::ClientWriter<::enginepb::SnapshotRequest> * Engine::Stub::ApplySnapshotRaw(::grpc::ClientContext *    context,
                                                                                   ::enginepb::SnapshotDone * response)
{
    return ::grpc::internal::ClientWriterFactory<::enginepb::SnapshotRequest>::Create(
        channel_.get(), rpcmethod_ApplySnapshot_, context, response);
}

::grpc::ClientAsyncWriter<::enginepb::SnapshotRequest> * Engine::Stub::AsyncApplySnapshotRaw(::grpc::ClientContext *    context,
                                                                                             ::enginepb::SnapshotDone * response,
                                                                                             ::grpc::CompletionQueue *  cq,
                                                                                             void *                     tag)
{
    return ::grpc::internal::ClientAsyncWriterFactory<::enginepb::SnapshotRequest>::Create(
        channel_.get(), cq, rpcmethod_ApplySnapshot_, context, response, true, tag);
}

::grpc::ClientAsyncWriter<::enginepb::SnapshotRequest> * Engine::Stub::PrepareAsyncApplySnapshotRaw(::grpc::ClientContext *    context,
                                                                                                    ::enginepb::SnapshotDone * response,
                                                                                                    ::grpc::CompletionQueue *  cq)
{
    return ::grpc::internal::ClientAsyncWriterFactory<::enginepb::SnapshotRequest>::Create(
        channel_.get(), cq, rpcmethod_ApplySnapshot_, context, response, false, nullptr);
}

Engine::Service::Service()
{
    AddMethod(new ::grpc::internal::RpcServiceMethod(
        Engine_method_names[0],
        ::grpc::internal::RpcMethod::BIDI_STREAMING,
        new ::grpc::internal::BidiStreamingHandler<Engine::Service, ::enginepb::CommandRequet, ::enginepb::CommandResponse>(
            std::mem_fn(&Engine::Service::ApplyCommand), this)));
    AddMethod(new ::grpc::internal::RpcServiceMethod(
        Engine_method_names[1],
        ::grpc::internal::RpcMethod::CLIENT_STREAMING,
        new ::grpc::internal::ClientStreamingHandler<Engine::Service, ::enginepb::SnapshotRequest, ::enginepb::SnapshotDone>(
            std::mem_fn(&Engine::Service::ApplySnapshot), this)));
}

Engine::Service::~Service() {}

::grpc::Status Engine::Service::ApplyCommand(::grpc::ServerContext *                                                              context,
                                             ::grpc::ServerReaderWriter<::enginepb::CommandResponse, ::enginepb::CommandRequet> * stream)
{
    (void)context;
    (void)stream;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Engine::Service::ApplySnapshot(::grpc::ServerContext *                             context,
                                              ::grpc::ServerReader<::enginepb::SnapshotRequest> * reader,
                                              ::enginepb::SnapshotDone *                          response)
{
    (void)context;
    (void)reader;
    (void)response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


} // namespace enginepb
