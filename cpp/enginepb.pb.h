// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enginepb.proto

#ifndef PROTOBUF_enginepb_2eproto__INCLUDED
#define PROTOBUF_enginepb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "raft_cmdpb.pb.h"
#include "raft_serverpb.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_enginepb_2eproto
{
// Internal implementation detail -- do not use these members.
struct TableStruct
{
    static const ::google::protobuf::internal::ParseTableField          entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable               schema[7];
    static const ::google::protobuf::internal::FieldMetadata            field_metadata[];
    static const ::google::protobuf::internal::SerializationTable       serialization_table[];
    static const ::google::protobuf::uint32                             offsets[];
};
void        AddDescriptors();
void        InitDefaultsCommandRequetHeaderImpl();
void        InitDefaultsCommandRequetHeader();
void        InitDefaultsCommandRequetImpl();
void        InitDefaultsCommandRequet();
void        InitDefaultsResponseHeaderImpl();
void        InitDefaultsResponseHeader();
void        InitDefaultsCommandResponseImpl();
void        InitDefaultsCommandResponse();
void        InitDefaultsSnapshotDataImpl();
void        InitDefaultsSnapshotData();
void        InitDefaultsSnapshotRequestImpl();
void        InitDefaultsSnapshotRequest();
void        InitDefaultsSnapshotDoneImpl();
void        InitDefaultsSnapshotDone();
inline void InitDefaults()
{
    InitDefaultsCommandRequetHeader();
    InitDefaultsCommandRequet();
    InitDefaultsResponseHeader();
    InitDefaultsCommandResponse();
    InitDefaultsSnapshotData();
    InitDefaultsSnapshotRequest();
    InitDefaultsSnapshotDone();
}
} // namespace protobuf_enginepb_2eproto
namespace enginepb
{
class CommandRequet;
class CommandRequetDefaultTypeInternal;
extern CommandRequetDefaultTypeInternal _CommandRequet_default_instance_;
class CommandRequetHeader;
class CommandRequetHeaderDefaultTypeInternal;
extern CommandRequetHeaderDefaultTypeInternal _CommandRequetHeader_default_instance_;
class CommandResponse;
class CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class SnapshotData;
class SnapshotDataDefaultTypeInternal;
extern SnapshotDataDefaultTypeInternal _SnapshotData_default_instance_;
class SnapshotDone;
class SnapshotDoneDefaultTypeInternal;
extern SnapshotDoneDefaultTypeInternal _SnapshotDone_default_instance_;
class SnapshotRequest;
class SnapshotRequestDefaultTypeInternal;
extern SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
} // namespace enginepb
namespace enginepb
{

// ===================================================================

class CommandRequetHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.CommandRequetHeader) */
{
public:
    CommandRequetHeader();
    virtual ~CommandRequetHeader();

    CommandRequetHeader(const CommandRequetHeader & from);

    inline CommandRequetHeader & operator=(const CommandRequetHeader & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    CommandRequetHeader(CommandRequetHeader && from) noexcept : CommandRequetHeader() { *this = ::std::move(from); }

    inline CommandRequetHeader & operator=(CommandRequetHeader && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const CommandRequetHeader &            default_instance();

    static void                               InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const CommandRequetHeader * internal_default_instance()
    {
        return reinterpret_cast<const CommandRequetHeader *>(&_CommandRequetHeader_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 0;

    void        Swap(CommandRequetHeader * other);
    friend void swap(CommandRequetHeader & a, CommandRequetHeader & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline CommandRequetHeader * New() const PROTOBUF_FINAL { return New(NULL); }

    CommandRequetHeader * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void                  CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void                  MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void                  CopyFrom(const CommandRequetHeader & from);
    void                  MergeFrom(const CommandRequetHeader & from);
    void                  Clear() PROTOBUF_FINAL;
    bool                  IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(CommandRequetHeader * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // uint64 region_id = 1;
    void                       clear_region_id();
    static const int           kRegionIdFieldNumber = 1;
    ::google::protobuf::uint64 region_id() const;
    void                       set_region_id(::google::protobuf::uint64 value);

    // bool sync_log = 2;
    void             clear_sync_log();
    static const int kSyncLogFieldNumber = 2;
    bool             sync_log() const;
    void             set_sync_log(bool value);

    // @@protoc_insertion_point(class_scope:enginepb.CommandRequetHeader)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::uint64                              region_id_;
    bool                                                    sync_log_;
    mutable int                                             _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsCommandRequetHeaderImpl();
};
// -------------------------------------------------------------------

class CommandRequet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.CommandRequet) */
{
public:
    CommandRequet();
    virtual ~CommandRequet();

    CommandRequet(const CommandRequet & from);

    inline CommandRequet & operator=(const CommandRequet & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    CommandRequet(CommandRequet && from) noexcept : CommandRequet() { *this = ::std::move(from); }

    inline CommandRequet & operator=(CommandRequet && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const CommandRequet &                  default_instance();

    static void                         InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const CommandRequet * internal_default_instance()
    {
        return reinterpret_cast<const CommandRequet *>(&_CommandRequet_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 1;

    void        Swap(CommandRequet * other);
    friend void swap(CommandRequet & a, CommandRequet & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline CommandRequet * New() const PROTOBUF_FINAL { return New(NULL); }

    CommandRequet * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void            CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void            MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void            CopyFrom(const CommandRequet & from);
    void            MergeFrom(const CommandRequet & from);
    void            Clear() PROTOBUF_FINAL;
    bool            IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(CommandRequet * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .raft_cmdpb.Request requests = 2;
    int                                                                 requests_size() const;
    void                                                                clear_requests();
    static const int                                                    kRequestsFieldNumber = 2;
    const ::raft_cmdpb::Request &                                       requests(int index) const;
    ::raft_cmdpb::Request *                                             mutable_requests(int index);
    ::raft_cmdpb::Request *                                             add_requests();
    ::google::protobuf::RepeatedPtrField<::raft_cmdpb::Request> *       mutable_requests();
    const ::google::protobuf::RepeatedPtrField<::raft_cmdpb::Request> & requests() const;

    // .enginepb.CommandRequetHeader header = 1;
    bool                                    has_header() const;
    void                                    clear_header();
    static const int                        kHeaderFieldNumber = 1;
    const ::enginepb::CommandRequetHeader & header() const;
    ::enginepb::CommandRequetHeader *       release_header();
    ::enginepb::CommandRequetHeader *       mutable_header();
    void                                    set_allocated_header(::enginepb::CommandRequetHeader * header);

    // .raft_cmdpb.AdminRequest admin_request = 3;
    bool                               has_admin_request() const;
    void                               clear_admin_request();
    static const int                   kAdminRequestFieldNumber = 3;
    const ::raft_cmdpb::AdminRequest & admin_request() const;
    ::raft_cmdpb::AdminRequest *       release_admin_request();
    ::raft_cmdpb::AdminRequest *       mutable_admin_request();
    void                               set_allocated_admin_request(::raft_cmdpb::AdminRequest * admin_request);

    // .raft_cmdpb.AdminResponse admin_response = 4;
    bool                                has_admin_response() const;
    void                                clear_admin_response();
    static const int                    kAdminResponseFieldNumber = 4;
    const ::raft_cmdpb::AdminResponse & admin_response() const;
    ::raft_cmdpb::AdminResponse *       release_admin_response();
    ::raft_cmdpb::AdminResponse *       mutable_admin_response();
    void                                set_allocated_admin_response(::raft_cmdpb::AdminResponse * admin_response);

    // @@protoc_insertion_point(class_scope:enginepb.CommandRequet)
private:
    ::google::protobuf::internal::InternalMetadataWithArena     _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::raft_cmdpb::Request> requests_;
    ::enginepb::CommandRequetHeader *                           header_;
    ::raft_cmdpb::AdminRequest *                                admin_request_;
    ::raft_cmdpb::AdminResponse *                               admin_response_;
    mutable int                                                 _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsCommandRequetImpl();
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.ResponseHeader) */
{
public:
    ResponseHeader();
    virtual ~ResponseHeader();

    ResponseHeader(const ResponseHeader & from);

    inline ResponseHeader & operator=(const ResponseHeader & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    ResponseHeader(ResponseHeader && from) noexcept : ResponseHeader() { *this = ::std::move(from); }

    inline ResponseHeader & operator=(ResponseHeader && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const ResponseHeader &                 default_instance();

    static void                          InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ResponseHeader * internal_default_instance()
    {
        return reinterpret_cast<const ResponseHeader *>(&_ResponseHeader_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 2;

    void        Swap(ResponseHeader * other);
    friend void swap(ResponseHeader & a, ResponseHeader & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline ResponseHeader * New() const PROTOBUF_FINAL { return New(NULL); }

    ResponseHeader * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void             CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void             MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void             CopyFrom(const ResponseHeader & from);
    void             MergeFrom(const ResponseHeader & from);
    void             Clear() PROTOBUF_FINAL;
    bool             IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(ResponseHeader * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // uint64 region_id = 1;
    void                       clear_region_id();
    static const int           kRegionIdFieldNumber = 1;
    ::google::protobuf::uint64 region_id() const;
    void                       set_region_id(::google::protobuf::uint64 value);

    // @@protoc_insertion_point(class_scope:enginepb.ResponseHeader)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::uint64                              region_id_;
    mutable int                                             _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsResponseHeaderImpl();
};
// -------------------------------------------------------------------

class CommandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.CommandResponse) */
{
public:
    CommandResponse();
    virtual ~CommandResponse();

    CommandResponse(const CommandResponse & from);

    inline CommandResponse & operator=(const CommandResponse & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    CommandResponse(CommandResponse && from) noexcept : CommandResponse() { *this = ::std::move(from); }

    inline CommandResponse & operator=(CommandResponse && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const CommandResponse &                default_instance();

    static void                           InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const CommandResponse * internal_default_instance()
    {
        return reinterpret_cast<const CommandResponse *>(&_CommandResponse_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 3;

    void        Swap(CommandResponse * other);
    friend void swap(CommandResponse & a, CommandResponse & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline CommandResponse * New() const PROTOBUF_FINAL { return New(NULL); }

    CommandResponse * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void              CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void              MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void              CopyFrom(const CommandResponse & from);
    void              MergeFrom(const CommandResponse & from);
    void              Clear() PROTOBUF_FINAL;
    bool              IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(CommandResponse * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // .enginepb.ResponseHeader header = 1;
    bool                               has_header() const;
    void                               clear_header();
    static const int                   kHeaderFieldNumber = 1;
    const ::enginepb::ResponseHeader & header() const;
    ::enginepb::ResponseHeader *       release_header();
    ::enginepb::ResponseHeader *       mutable_header();
    void                               set_allocated_header(::enginepb::ResponseHeader * header);

    // .raft_serverpb.RaftApplyState apply_state = 2;
    bool                                    has_apply_state() const;
    void                                    clear_apply_state();
    static const int                        kApplyStateFieldNumber = 2;
    const ::raft_serverpb::RaftApplyState & apply_state() const;
    ::raft_serverpb::RaftApplyState *       release_apply_state();
    ::raft_serverpb::RaftApplyState *       mutable_apply_state();
    void                                    set_allocated_apply_state(::raft_serverpb::RaftApplyState * apply_state);

    // @@protoc_insertion_point(class_scope:enginepb.CommandResponse)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::enginepb::ResponseHeader *                            header_;
    ::raft_serverpb::RaftApplyState *                       apply_state_;
    mutable int                                             _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsCommandResponseImpl();
};
// -------------------------------------------------------------------

class SnapshotData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.SnapshotData) */
{
public:
    SnapshotData();
    virtual ~SnapshotData();

    SnapshotData(const SnapshotData & from);

    inline SnapshotData & operator=(const SnapshotData & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    SnapshotData(SnapshotData && from) noexcept : SnapshotData() { *this = ::std::move(from); }

    inline SnapshotData & operator=(SnapshotData && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const SnapshotData &                   default_instance();

    static void                        InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SnapshotData * internal_default_instance()
    {
        return reinterpret_cast<const SnapshotData *>(&_SnapshotData_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 4;

    void        Swap(SnapshotData * other);
    friend void swap(SnapshotData & a, SnapshotData & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline SnapshotData * New() const PROTOBUF_FINAL { return New(NULL); }

    SnapshotData * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void           CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void           MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void           CopyFrom(const SnapshotData & from);
    void           MergeFrom(const SnapshotData & from);
    void           Clear() PROTOBUF_FINAL;
    bool           IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SnapshotData * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .raft_serverpb.KeyValue data = 3;
    int                                                                     data_size() const;
    void                                                                    clear_data();
    static const int                                                        kDataFieldNumber = 3;
    const ::raft_serverpb::KeyValue &                                       data(int index) const;
    ::raft_serverpb::KeyValue *                                             mutable_data(int index);
    ::raft_serverpb::KeyValue *                                             add_data();
    ::google::protobuf::RepeatedPtrField<::raft_serverpb::KeyValue> *       mutable_data();
    const ::google::protobuf::RepeatedPtrField<::raft_serverpb::KeyValue> & data() const;

    // string cf = 1;
    void                  clear_cf();
    static const int      kCfFieldNumber = 1;
    const ::std::string & cf() const;
    void                  set_cf(const ::std::string & value);
#if LANG_CXX11
    void set_cf(::std::string && value);
#endif
    void            set_cf(const char * value);
    void            set_cf(const char * value, size_t size);
    ::std::string * mutable_cf();
    ::std::string * release_cf();
    void            set_allocated_cf(::std::string * cf);

    // uint32 checksum = 2;
    void                       clear_checksum();
    static const int           kChecksumFieldNumber = 2;
    ::google::protobuf::uint32 checksum() const;
    void                       set_checksum(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:enginepb.SnapshotData)
private:
    ::google::protobuf::internal::InternalMetadataWithArena         _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::raft_serverpb::KeyValue> data_;
    ::google::protobuf::internal::ArenaStringPtr                    cf_;
    ::google::protobuf::uint32                                      checksum_;
    mutable int                                                     _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsSnapshotDataImpl();
};
// -------------------------------------------------------------------

class SnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.SnapshotRequest) */
{
public:
    SnapshotRequest();
    virtual ~SnapshotRequest();

    SnapshotRequest(const SnapshotRequest & from);

    inline SnapshotRequest & operator=(const SnapshotRequest & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    SnapshotRequest(SnapshotRequest && from) noexcept : SnapshotRequest() { *this = ::std::move(from); }

    inline SnapshotRequest & operator=(SnapshotRequest && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const SnapshotRequest &                default_instance();

    enum ChunkCase
    {
        kRegion       = 1,
        kData         = 2,
        CHUNK_NOT_SET = 0,
    };

    static void                           InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SnapshotRequest * internal_default_instance()
    {
        return reinterpret_cast<const SnapshotRequest *>(&_SnapshotRequest_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 5;

    void        Swap(SnapshotRequest * other);
    friend void swap(SnapshotRequest & a, SnapshotRequest & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline SnapshotRequest * New() const PROTOBUF_FINAL { return New(NULL); }

    SnapshotRequest * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void              CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void              MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void              CopyFrom(const SnapshotRequest & from);
    void              MergeFrom(const SnapshotRequest & from);
    void              Clear() PROTOBUF_FINAL;
    bool              IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SnapshotRequest * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // .metapb.Region region = 1;
    bool                     has_region() const;
    void                     clear_region();
    static const int         kRegionFieldNumber = 1;
    const ::metapb::Region & region() const;
    ::metapb::Region *       release_region();
    ::metapb::Region *       mutable_region();
    void                     set_allocated_region(::metapb::Region * region);

    // .enginepb.SnapshotData data = 2;
    bool                             has_data() const;
    void                             clear_data();
    static const int                 kDataFieldNumber = 2;
    const ::enginepb::SnapshotData & data() const;
    ::enginepb::SnapshotData *       release_data();
    ::enginepb::SnapshotData *       mutable_data();
    void                             set_allocated_data(::enginepb::SnapshotData * data);

    ChunkCase chunk_case() const;
    // @@protoc_insertion_point(class_scope:enginepb.SnapshotRequest)
private:
    void set_has_region();
    void set_has_data();

    inline bool has_chunk() const;
    void        clear_chunk();
    inline void clear_has_chunk();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    union ChunkUnion
    {
        ChunkUnion() {}
        ::metapb::Region *         region_;
        ::enginepb::SnapshotData * data_;
    } chunk_;
    mutable int                _cached_size_;
    ::google::protobuf::uint32 _oneof_case_[1];

    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsSnapshotRequestImpl();
};
// -------------------------------------------------------------------

class SnapshotDone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:enginepb.SnapshotDone) */
{
public:
    SnapshotDone();
    virtual ~SnapshotDone();

    SnapshotDone(const SnapshotDone & from);

    inline SnapshotDone & operator=(const SnapshotDone & from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    SnapshotDone(SnapshotDone && from) noexcept : SnapshotDone() { *this = ::std::move(from); }

    inline SnapshotDone & operator=(SnapshotDone && from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor * descriptor();
    static const SnapshotDone &                   default_instance();

    static void                        InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SnapshotDone * internal_default_instance()
    {
        return reinterpret_cast<const SnapshotDone *>(&_SnapshotDone_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 6;

    void        Swap(SnapshotDone * other);
    friend void swap(SnapshotDone & a, SnapshotDone & b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline SnapshotDone * New() const PROTOBUF_FINAL { return New(NULL); }

    SnapshotDone * New(::google::protobuf::Arena * arena) const PROTOBUF_FINAL;
    void           CopyFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void           MergeFrom(const ::google::protobuf::Message & from) PROTOBUF_FINAL;
    void           CopyFrom(const SnapshotDone & from);
    void           MergeFrom(const SnapshotDone & from);
    void           Clear() PROTOBUF_FINAL;
    bool           IsInitialized() const PROTOBUF_FINAL;

    size_t                      ByteSizeLong() const PROTOBUF_FINAL;
    bool                        MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream * input) PROTOBUF_FINAL;
    void                        SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream * output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8 * InternalSerializeWithCachedSizesToArray(bool                        deterministic,
                                                                        ::google::protobuf::uint8 * target) const PROTOBUF_FINAL;
    int                         GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SnapshotDone * other);

private:
    inline ::google::protobuf::Arena * GetArenaNoVirtual() const { return NULL; }
    inline void *                      MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:enginepb.SnapshotDone)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    mutable int                                             _cached_size_;
    friend struct ::protobuf_enginepb_2eproto::TableStruct;
    friend void ::protobuf_enginepb_2eproto::InitDefaultsSnapshotDoneImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// CommandRequetHeader

// uint64 region_id = 1;
inline void CommandRequetHeader::clear_region_id()
{
    region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommandRequetHeader::region_id() const
{
    // @@protoc_insertion_point(field_get:enginepb.CommandRequetHeader.region_id)
    return region_id_;
}
inline void CommandRequetHeader::set_region_id(::google::protobuf::uint64 value)
{

    region_id_ = value;
    // @@protoc_insertion_point(field_set:enginepb.CommandRequetHeader.region_id)
}

// bool sync_log = 2;
inline void CommandRequetHeader::clear_sync_log()
{
    sync_log_ = false;
}
inline bool CommandRequetHeader::sync_log() const
{
    // @@protoc_insertion_point(field_get:enginepb.CommandRequetHeader.sync_log)
    return sync_log_;
}
inline void CommandRequetHeader::set_sync_log(bool value)
{

    sync_log_ = value;
    // @@protoc_insertion_point(field_set:enginepb.CommandRequetHeader.sync_log)
}

// -------------------------------------------------------------------

// CommandRequet

// .enginepb.CommandRequetHeader header = 1;
inline bool CommandRequet::has_header() const
{
    return this != internal_default_instance() && header_ != NULL;
}
inline void CommandRequet::clear_header()
{
    if (GetArenaNoVirtual() == NULL && header_ != NULL)
    {
        delete header_;
    }
    header_ = NULL;
}
inline const ::enginepb::CommandRequetHeader & CommandRequet::header() const
{
    const ::enginepb::CommandRequetHeader * p = header_;
    // @@protoc_insertion_point(field_get:enginepb.CommandRequet.header)
    return p != NULL ? *p : *reinterpret_cast<const ::enginepb::CommandRequetHeader *>(&::enginepb::_CommandRequetHeader_default_instance_);
}
inline ::enginepb::CommandRequetHeader * CommandRequet::release_header()
{
    // @@protoc_insertion_point(field_release:enginepb.CommandRequet.header)

    ::enginepb::CommandRequetHeader * temp = header_;
    header_                                = NULL;
    return temp;
}
inline ::enginepb::CommandRequetHeader * CommandRequet::mutable_header()
{

    if (header_ == NULL)
    {
        header_ = new ::enginepb::CommandRequetHeader;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.CommandRequet.header)
    return header_;
}
inline void CommandRequet::set_allocated_header(::enginepb::CommandRequetHeader * header)
{
    ::google::protobuf::Arena * message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete header_;
    }
    if (header)
    {
        ::google::protobuf::Arena * submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            header = ::google::protobuf::internal::GetOwnedMessage(message_arena, header, submessage_arena);
        }
    }
    else
    {
    }
    header_ = header;
    // @@protoc_insertion_point(field_set_allocated:enginepb.CommandRequet.header)
}

// repeated .raft_cmdpb.Request requests = 2;
inline int CommandRequet::requests_size() const
{
    return requests_.size();
}
inline const ::raft_cmdpb::Request & CommandRequet::requests(int index) const
{
    // @@protoc_insertion_point(field_get:enginepb.CommandRequet.requests)
    return requests_.Get(index);
}
inline ::raft_cmdpb::Request * CommandRequet::mutable_requests(int index)
{
    // @@protoc_insertion_point(field_mutable:enginepb.CommandRequet.requests)
    return requests_.Mutable(index);
}
inline ::raft_cmdpb::Request * CommandRequet::add_requests()
{
    // @@protoc_insertion_point(field_add:enginepb.CommandRequet.requests)
    return requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::raft_cmdpb::Request> * CommandRequet::mutable_requests()
{
    // @@protoc_insertion_point(field_mutable_list:enginepb.CommandRequet.requests)
    return &requests_;
}
inline const ::google::protobuf::RepeatedPtrField<::raft_cmdpb::Request> & CommandRequet::requests() const
{
    // @@protoc_insertion_point(field_list:enginepb.CommandRequet.requests)
    return requests_;
}

// .raft_cmdpb.AdminRequest admin_request = 3;
inline bool CommandRequet::has_admin_request() const
{
    return this != internal_default_instance() && admin_request_ != NULL;
}
inline const ::raft_cmdpb::AdminRequest & CommandRequet::admin_request() const
{
    const ::raft_cmdpb::AdminRequest * p = admin_request_;
    // @@protoc_insertion_point(field_get:enginepb.CommandRequet.admin_request)
    return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminRequest *>(&::raft_cmdpb::_AdminRequest_default_instance_);
}
inline ::raft_cmdpb::AdminRequest * CommandRequet::release_admin_request()
{
    // @@protoc_insertion_point(field_release:enginepb.CommandRequet.admin_request)

    ::raft_cmdpb::AdminRequest * temp = admin_request_;
    admin_request_                    = NULL;
    return temp;
}
inline ::raft_cmdpb::AdminRequest * CommandRequet::mutable_admin_request()
{

    if (admin_request_ == NULL)
    {
        admin_request_ = new ::raft_cmdpb::AdminRequest;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.CommandRequet.admin_request)
    return admin_request_;
}
inline void CommandRequet::set_allocated_admin_request(::raft_cmdpb::AdminRequest * admin_request)
{
    ::google::protobuf::Arena * message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete reinterpret_cast<::google::protobuf::MessageLite *>(admin_request_);
    }
    if (admin_request)
    {
        ::google::protobuf::Arena * submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            admin_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, admin_request, submessage_arena);
        }
    }
    else
    {
    }
    admin_request_ = admin_request;
    // @@protoc_insertion_point(field_set_allocated:enginepb.CommandRequet.admin_request)
}

// .raft_cmdpb.AdminResponse admin_response = 4;
inline bool CommandRequet::has_admin_response() const
{
    return this != internal_default_instance() && admin_response_ != NULL;
}
inline const ::raft_cmdpb::AdminResponse & CommandRequet::admin_response() const
{
    const ::raft_cmdpb::AdminResponse * p = admin_response_;
    // @@protoc_insertion_point(field_get:enginepb.CommandRequet.admin_response)
    return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminResponse *>(&::raft_cmdpb::_AdminResponse_default_instance_);
}
inline ::raft_cmdpb::AdminResponse * CommandRequet::release_admin_response()
{
    // @@protoc_insertion_point(field_release:enginepb.CommandRequet.admin_response)

    ::raft_cmdpb::AdminResponse * temp = admin_response_;
    admin_response_                    = NULL;
    return temp;
}
inline ::raft_cmdpb::AdminResponse * CommandRequet::mutable_admin_response()
{

    if (admin_response_ == NULL)
    {
        admin_response_ = new ::raft_cmdpb::AdminResponse;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.CommandRequet.admin_response)
    return admin_response_;
}
inline void CommandRequet::set_allocated_admin_response(::raft_cmdpb::AdminResponse * admin_response)
{
    ::google::protobuf::Arena * message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete reinterpret_cast<::google::protobuf::MessageLite *>(admin_response_);
    }
    if (admin_response)
    {
        ::google::protobuf::Arena * submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            admin_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, admin_response, submessage_arena);
        }
    }
    else
    {
    }
    admin_response_ = admin_response;
    // @@protoc_insertion_point(field_set_allocated:enginepb.CommandRequet.admin_response)
}

// -------------------------------------------------------------------

// ResponseHeader

// uint64 region_id = 1;
inline void ResponseHeader::clear_region_id()
{
    region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResponseHeader::region_id() const
{
    // @@protoc_insertion_point(field_get:enginepb.ResponseHeader.region_id)
    return region_id_;
}
inline void ResponseHeader::set_region_id(::google::protobuf::uint64 value)
{

    region_id_ = value;
    // @@protoc_insertion_point(field_set:enginepb.ResponseHeader.region_id)
}

// -------------------------------------------------------------------

// CommandResponse

// .enginepb.ResponseHeader header = 1;
inline bool CommandResponse::has_header() const
{
    return this != internal_default_instance() && header_ != NULL;
}
inline void CommandResponse::clear_header()
{
    if (GetArenaNoVirtual() == NULL && header_ != NULL)
    {
        delete header_;
    }
    header_ = NULL;
}
inline const ::enginepb::ResponseHeader & CommandResponse::header() const
{
    const ::enginepb::ResponseHeader * p = header_;
    // @@protoc_insertion_point(field_get:enginepb.CommandResponse.header)
    return p != NULL ? *p : *reinterpret_cast<const ::enginepb::ResponseHeader *>(&::enginepb::_ResponseHeader_default_instance_);
}
inline ::enginepb::ResponseHeader * CommandResponse::release_header()
{
    // @@protoc_insertion_point(field_release:enginepb.CommandResponse.header)

    ::enginepb::ResponseHeader * temp = header_;
    header_                           = NULL;
    return temp;
}
inline ::enginepb::ResponseHeader * CommandResponse::mutable_header()
{

    if (header_ == NULL)
    {
        header_ = new ::enginepb::ResponseHeader;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.CommandResponse.header)
    return header_;
}
inline void CommandResponse::set_allocated_header(::enginepb::ResponseHeader * header)
{
    ::google::protobuf::Arena * message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete header_;
    }
    if (header)
    {
        ::google::protobuf::Arena * submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            header = ::google::protobuf::internal::GetOwnedMessage(message_arena, header, submessage_arena);
        }
    }
    else
    {
    }
    header_ = header;
    // @@protoc_insertion_point(field_set_allocated:enginepb.CommandResponse.header)
}

// .raft_serverpb.RaftApplyState apply_state = 2;
inline bool CommandResponse::has_apply_state() const
{
    return this != internal_default_instance() && apply_state_ != NULL;
}
inline const ::raft_serverpb::RaftApplyState & CommandResponse::apply_state() const
{
    const ::raft_serverpb::RaftApplyState * p = apply_state_;
    // @@protoc_insertion_point(field_get:enginepb.CommandResponse.apply_state)
    return p != NULL ? *p : *reinterpret_cast<const ::raft_serverpb::RaftApplyState *>(&::raft_serverpb::_RaftApplyState_default_instance_);
}
inline ::raft_serverpb::RaftApplyState * CommandResponse::release_apply_state()
{
    // @@protoc_insertion_point(field_release:enginepb.CommandResponse.apply_state)

    ::raft_serverpb::RaftApplyState * temp = apply_state_;
    apply_state_                           = NULL;
    return temp;
}
inline ::raft_serverpb::RaftApplyState * CommandResponse::mutable_apply_state()
{

    if (apply_state_ == NULL)
    {
        apply_state_ = new ::raft_serverpb::RaftApplyState;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.CommandResponse.apply_state)
    return apply_state_;
}
inline void CommandResponse::set_allocated_apply_state(::raft_serverpb::RaftApplyState * apply_state)
{
    ::google::protobuf::Arena * message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete reinterpret_cast<::google::protobuf::MessageLite *>(apply_state_);
    }
    if (apply_state)
    {
        ::google::protobuf::Arena * submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            apply_state = ::google::protobuf::internal::GetOwnedMessage(message_arena, apply_state, submessage_arena);
        }
    }
    else
    {
    }
    apply_state_ = apply_state;
    // @@protoc_insertion_point(field_set_allocated:enginepb.CommandResponse.apply_state)
}

// -------------------------------------------------------------------

// SnapshotData

// string cf = 1;
inline void SnapshotData::clear_cf()
{
    cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string & SnapshotData::cf() const
{
    // @@protoc_insertion_point(field_get:enginepb.SnapshotData.cf)
    return cf_.GetNoArena();
}
inline void SnapshotData::set_cf(const ::std::string & value)
{

    cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enginepb.SnapshotData.cf)
}
#if LANG_CXX11
inline void SnapshotData::set_cf(::std::string && value)
{

    cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:enginepb.SnapshotData.cf)
}
#endif
inline void SnapshotData::set_cf(const char * value)
{
    GOOGLE_DCHECK(value != NULL);

    cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enginepb.SnapshotData.cf)
}
inline void SnapshotData::set_cf(const char * value, size_t size)
{

    cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char *>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enginepb.SnapshotData.cf)
}
inline ::std::string * SnapshotData::mutable_cf()
{

    // @@protoc_insertion_point(field_mutable:enginepb.SnapshotData.cf)
    return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string * SnapshotData::release_cf()
{
    // @@protoc_insertion_point(field_release:enginepb.SnapshotData.cf)

    return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotData::set_allocated_cf(::std::string * cf)
{
    if (cf != NULL) {}
    else
    {
    }
    cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
    // @@protoc_insertion_point(field_set_allocated:enginepb.SnapshotData.cf)
}

// uint32 checksum = 2;
inline void SnapshotData::clear_checksum()
{
    checksum_ = 0u;
}
inline ::google::protobuf::uint32 SnapshotData::checksum() const
{
    // @@protoc_insertion_point(field_get:enginepb.SnapshotData.checksum)
    return checksum_;
}
inline void SnapshotData::set_checksum(::google::protobuf::uint32 value)
{

    checksum_ = value;
    // @@protoc_insertion_point(field_set:enginepb.SnapshotData.checksum)
}

// repeated .raft_serverpb.KeyValue data = 3;
inline int SnapshotData::data_size() const
{
    return data_.size();
}
inline const ::raft_serverpb::KeyValue & SnapshotData::data(int index) const
{
    // @@protoc_insertion_point(field_get:enginepb.SnapshotData.data)
    return data_.Get(index);
}
inline ::raft_serverpb::KeyValue * SnapshotData::mutable_data(int index)
{
    // @@protoc_insertion_point(field_mutable:enginepb.SnapshotData.data)
    return data_.Mutable(index);
}
inline ::raft_serverpb::KeyValue * SnapshotData::add_data()
{
    // @@protoc_insertion_point(field_add:enginepb.SnapshotData.data)
    return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::raft_serverpb::KeyValue> * SnapshotData::mutable_data()
{
    // @@protoc_insertion_point(field_mutable_list:enginepb.SnapshotData.data)
    return &data_;
}
inline const ::google::protobuf::RepeatedPtrField<::raft_serverpb::KeyValue> & SnapshotData::data() const
{
    // @@protoc_insertion_point(field_list:enginepb.SnapshotData.data)
    return data_;
}

// -------------------------------------------------------------------

// SnapshotRequest

// .metapb.Region region = 1;
inline bool SnapshotRequest::has_region() const
{
    return chunk_case() == kRegion;
}
inline void SnapshotRequest::set_has_region()
{
    _oneof_case_[0] = kRegion;
}
inline ::metapb::Region * SnapshotRequest::release_region()
{
    // @@protoc_insertion_point(field_release:enginepb.SnapshotRequest.region)
    if (has_region())
    {
        clear_has_chunk();
        ::metapb::Region * temp = chunk_.region_;
        chunk_.region_          = NULL;
        return temp;
    }
    else
    {
        return NULL;
    }
}
inline const ::metapb::Region & SnapshotRequest::region() const
{
    // @@protoc_insertion_point(field_get:enginepb.SnapshotRequest.region)
    return has_region() ? *chunk_.region_ : *reinterpret_cast<::metapb::Region *>(&::metapb::_Region_default_instance_);
}
inline ::metapb::Region * SnapshotRequest::mutable_region()
{
    if (!has_region())
    {
        clear_chunk();
        set_has_region();
        chunk_.region_ = new ::metapb::Region;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.SnapshotRequest.region)
    return chunk_.region_;
}

// .enginepb.SnapshotData data = 2;
inline bool SnapshotRequest::has_data() const
{
    return chunk_case() == kData;
}
inline void SnapshotRequest::set_has_data()
{
    _oneof_case_[0] = kData;
}
inline void SnapshotRequest::clear_data()
{
    if (has_data())
    {
        delete chunk_.data_;
        clear_has_chunk();
    }
}
inline ::enginepb::SnapshotData * SnapshotRequest::release_data()
{
    // @@protoc_insertion_point(field_release:enginepb.SnapshotRequest.data)
    if (has_data())
    {
        clear_has_chunk();
        ::enginepb::SnapshotData * temp = chunk_.data_;
        chunk_.data_                    = NULL;
        return temp;
    }
    else
    {
        return NULL;
    }
}
inline const ::enginepb::SnapshotData & SnapshotRequest::data() const
{
    // @@protoc_insertion_point(field_get:enginepb.SnapshotRequest.data)
    return has_data() ? *chunk_.data_ : *reinterpret_cast<::enginepb::SnapshotData *>(&::enginepb::_SnapshotData_default_instance_);
}
inline ::enginepb::SnapshotData * SnapshotRequest::mutable_data()
{
    if (!has_data())
    {
        clear_chunk();
        set_has_data();
        chunk_.data_ = new ::enginepb::SnapshotData;
    }
    // @@protoc_insertion_point(field_mutable:enginepb.SnapshotRequest.data)
    return chunk_.data_;
}

inline bool SnapshotRequest::has_chunk() const
{
    return chunk_case() != CHUNK_NOT_SET;
}
inline void SnapshotRequest::clear_has_chunk()
{
    _oneof_case_[0] = CHUNK_NOT_SET;
}
inline SnapshotRequest::ChunkCase SnapshotRequest::chunk_case() const
{
    return SnapshotRequest::ChunkCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SnapshotDone

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

} // namespace enginepb

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_enginepb_2eproto__INCLUDED
